/*

to make an item fill up the remainder of a div
<div style="border: 7px solid red; display: flex; flex-flow: column; height: 100%">
    <p>I take up the entire vertical space of my parent, and will display my children in a column</p>
    <div style="display: flex; flex-direction: column; flex: 1 1 100px;">
        <p>I am at minimum 100px tall, am flexible in the vertical direction, and can grow or shrink. I will always fill in remaining space</p>
    </div>
    <div style="border: 7px solid yellow;">
        <p>I am the default, unflexible size</p>
    </div>
    <div style="border: 7px solid yellow;">
        <p>I am the default, unflexible size</p>
    </div>
</div>
https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Basic_Concepts_of_Flexbox

define variables in html{} or :root{} by starting with two dashes: --red, --mycolor
use via var(--red);

import fonts directly in css by going to google fonts and grabbing the link to all fonts you want, and using
@import url("https://...");
then use the font's name and font-weights to style text

use calc() to do calculations, ex 20px + 100%

animations
@keyframe animName {
    from {
        state
    }
    to {
        state
    }
}
or, use 25%, 50%, ...
then add animation: animName; animation-duration: _s;
animation-delay to delay
animation-iteration-count: infinite;
animation-direction to specify reverse, forward
animation-timing-function: ease-in, ease-out, linear, ease-in-out, cubic bezier...
animation-fill-mode: forward; to ensure the last state sticks instead of reverting; both for both start and end retained in both directions
animation is shorthand for name, duration, timing, delay, count, and direction, separated with spaces

em unit for font size, relative to parent
rem unit for font size, relative to font default size

element:hover {
    onhover...
}
such as transform: scale(1.1) rotation(5deg);

[] is attribute selector
for example .myclass[tooltip="whoa"] matches any myclass with tooltip whoa

content is a css attr used for ::before and ::after selectors to insert generated content
ex. if an html element has attr tooltip
a::after {
    content: attr(tooltip);
}

@media (max-width: 1000px) {
    nav {
        display: none;
    }
}
@media checks the size of the page among other things
its contents only run if its condition is true
ex orientation can be checked
often checks max-width and max-height, never just width and height
can also use not before it to invert
https://www.w3schools.com/cssref/css3_pr_mediaquery.asp
can also set individual stylesheets to only activate
<link rel="stylesheet" media="screen and (min-width: 900px)" href="widescreen.css">
<link rel="stylesheet" media="screen and (max-width: 600px)" href="smallscreen.css">

transform: translate(x_px, y_px)
transform: rotate(xx_deg)
box-shadow: x_offset_px, y_offset_px, {blur_px}, color, {inset}
inset for inside shadow, blurpx is optional

instead of button:
<input type="button" value="Click me!">
you can then set button's value's style in css
.mybuttonclass[value] {...}

multiple identifier application
p .myClass {}

color type: linear-gradient
background: linear-gradient(xxdeg, color_1, color_2)

position: sticky allows it to stick on the screen even while scrolling, but has a starting normal position
fixed is always on its one position on the screen even when you scroll

:nth-child(#) refers to the element before's #th child
can also have odd, even, or a formula
formula of type mx+b, ex 3n+0, n is a counter

max() is maximum of params, ex 1vh and 30%

html {
    scroll-behavior: smooth;
}
for smooth scrolling

href can refer to ids
* also refers to all, like html
however, does not select pseudoelements (::)
so use *, *::before, *::after {}
by default, one of the * settings is box-sizing: content-box
this means that when width is set, the width refers to the content width
setting box-sizing to border-box will make it act on the borders, so that border (between margin and padding) is width

.translateX() and .translateY(), such as by percents

html styling tags
<b> - Bold text
<strong> - Important text
<i> - Italic text
<em> - Emphasized text
<mark> - Marked text
<small> - Smaller text
<del> - Deleted text
<ins> - Inserted text
<sub> - Subscript text
<sup> - Superscript text

units
    em: 1em is the current fontsize
    ch: char, relative to width of 0
    rem: relative to font size of *
    %: of parent

*/


/*

notes on jquery, https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js
.show(), .hide(), but id or class, css selectors
.text() is a getter and a setter
.css("propertyName") or .css("propertyName", "val") for setter
.fadeIn() and .fadeOut(), take params duration in ms and finally (ex $(".myclass").fadeOut(500, () => {})
$("") selector, by class, id, tag...
.val() for inputs in forms ex type="button", setter and getter
.attr
onruntime:
$(document).ready(() => {
    all postload actions, actions on the dom
}
.click(() => {
    action
}
.hover(()=>{})
.height() get set
.animate({
    property: value;
    property: value;
    property: value;
}, speed, finally)
speed can be slow, fast, milliseconds...
will go to css params
finally for function to run afterwards
remember to use camelCase for properties, strings
relative valeus are allowed: height: '+=150px', for 150 more than the current value
if multiple are in a row, jquery will run them in that order, not all at once
.text returns the innerHTML, .html returns the html, also supports get and set
or, to simplify document.onready:
$(function(){

  // jQuery methods go here...

});
mouseenter, mouseleave
fadeToggle
fading functions take speeds, ex slow, fast, ms
fadeTo
slideUp and slideDown; slideToggle
.stop stops all current anims, ex fade
the callback finally function is used so that the next lin doesnt start running beforehand
.slideup.slidedown...
selector
    .slideup
    .slidedown
appending
var txt1 = "<p>Text.</p>";               // Create element with HTML 
  var txt2 = $("<p></p>").text("Text.");   // Create with jQuery
  var txt3 = document.createElement("p");  // Create with DOM
  txt3.innerHTML = "Text.";
  $("body").append(txt1, txt2, txt3);      // Append the new elements
also .before and .after
.remove .empty
can .addClass, .removeClass, .toggleClass
parents(), children(), siblings(), first()
with ajax
    $("#div1").load("demo_test.txt");
    $.get(url), $.post
    https://www.w3schools.com/jquERy/jquery_ref_ajax.asp
.filter()


*/


/*

general notes on ecma6
const functionName = {param) => {}
() => {}, or single line () => return value
setTimeout(() => {
    actions
}, interval)
clearTimeout
brackets are optional if there is only one param
using backticks, ``, you can have ${} to insert

*/